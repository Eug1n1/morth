// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    userId String @id @default(cuid())

    username String  @unique
    hash     String
    hashedRt String?

    Media   Media[]
    Views   View[]
    Likes   Like[]
    Folders Folder[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Media {
    mediaId String @id @default(nanoid())

    title       String
    description String  @default("")
    filePath    String  @unique
    isPrivate   Boolean @default(false) // TODO: a nahuy nuzhno

    Tags    Tag[]
    Folders Folder[]
    Views   View[]
    Likes   Like[]

    Type     Type   @relation(fields: [typeId], references: [typeId])
    typeId String

    User     User   @relation(fields: [userId], references: [userId])
    userId String

    Thumbnail     Thumbnail? @relation(references: [thumbId], fields: [thumbId])
    thumbId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Thumbnail {
    thumbId String @id @default(cuid())

    thumbPath String

    Media  Media[]
    Folder Folder[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Folder {
    folderId String @id @default(cuid())

    name      String
    isPrivate Boolean @default(false) // TODO: a nahuy nuzhno

    Media Media[]

    User     User   @relation(fields: [userId], references: [userId])
    userId String

    Thumbnail     Thumbnail? @relation(fields: [thumbnailId], references: [thumbId])
    thumbnailId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, userId])
    @@index([userId])
}

model Tag {
    tagId String @id

    Media Media[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Type {
    typeId String @id @default(cuid())

    name String @unique

    Media Media[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model View {
    viewId Int @id @default(autoincrement())

    Media     Media  @relation(fields: [mediaId], references: [mediaId])
    mediaId String

    User     User   @relation(fields: [userId], references: [userId])
    userId String

    createdAt DateTime @default(now())
}

model Like {
    likeId Int @id @default(autoincrement())

    Media     Media  @relation(fields: [mediaId], references: [mediaId])
    mediaId String

    User     User   @relation(fields: [userId], references: [userId])
    userId String

    createdAt DateTime @default(now())

    @@unique([userId, mediaId])
}
