// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    cuid String @id @default(cuid())

    username String  @unique
    hash     String
    hashedRt String?

    Media   Media[]
    Views   View[]
    Likes   Like[]
    Folders Folder[]

    Preview     Image?  @relation(fields: [previewCuid], references: [cuid])
    previewCuid String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Media {
    cuid String @id @default(cuid())

    title       String
    description String  @default("")
    filePath    String  @unique
    isPrivate   Boolean @default(false) // TODO: a nahuy nuzhno

    Tags    Tag[]
    Folders Folder[]
    Views   View[]
    Likes   Like[]

    Type     Type   @relation(fields: [typeCuid], references: [cuid])
    typeCuid String

    User     User   @relation(fields: [userCuid], references: [cuid])
    userCuid String

    Thumb         Image  @relation(references: [cuid], fields: [thumbnailCuid])
    thumbnailCuid String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Image {
    cuid String @id @default(cuid())

    imagePath String // TODO: set default path

    Media  Media[]
    User   User[]
    Folder Folder[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("Thumbnail")
}

model Folder {
    cuid String @id @default(cuid())

    name      String
    isPrivate Boolean @default(false) // TODO: a nahuy nuzhno

    Media Media[]

    User     User   @relation(fields: [userCuid], references: [cuid])
    userCuid String

    Preview     Image?  @relation(fields: [previewCuid], references: [cuid])
    previewCuid String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, userCuid])
    @@index([userCuid])
}

model Tag {
    cuid String @id @default(cuid())

    name String @unique

    Media Media[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Type {
    cuid String @id @default(cuid())

    name String

    Media Media[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model View {
    cuid Int @id @default(autoincrement())

    Media     Media  @relation(fields: [mediaCuid], references: [cuid])
    mediaCuid String

    User     User   @relation(fields: [userCuid], references: [cuid])
    userCuid String

    createdAt DateTime @default(now())
}

model Like {
    cuid Int @id @default(autoincrement())

    Media     Media  @relation(fields: [mediaCuid], references: [cuid])
    mediaCuid String

    User     User   @relation(fields: [userCuid], references: [cuid])
    userCuid String

    createdAt DateTime @default(now())

    @@unique([userCuid, mediaCuid])
}
